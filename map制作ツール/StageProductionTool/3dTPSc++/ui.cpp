//===============================================
//
// UI処理 (ui.cpp)
// Author : 東村哲士
//
//===============================================

#include "ui.h"

#include "manager.h"
#include "renderer.h"

//========================================
// 静的メンバ変数宣言
//========================================
LPDIRECT3DTEXTURE9 CUi::m_apTexture[3][TYPE_MAX];

//=============================================================================
// コンストラクタ
//=============================================================================
CUi::CUi() : CScene2D(CScene::OBJTYPE_BLOCK)
{
	m_bUse = false;
}

//=============================================================================
// デストラクタ
//=============================================================================
CUi::~CUi()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CUi::Init(D3DXVECTOR3 pos) {
	CScene2D::Init(pos, D3DXVECTOR3(474, 295, 0), D3DXVECTOR3(0, 0, 0));
	BindTexture(m_apTexture[2][0]);

	return S_OK;
}

//=============================================================================
// 更新処理
//=============================================================================
void CUi::Update(void) {
	//キーボードの確保したメモリを取得
	m_pInputKeyboard = CManager::GetInputKeyboard();

	if (m_pInputKeyboard->GetKeyboardTrigger(DIK_E)) {
		m_bUse = !m_bUse;
	}

	if (m_bUse == true) {
		SetVertex();
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CUi::Draw(void) {
	CScene2D::Draw();
}

//=============================================================================
// 終了処理
//=============================================================================
void CUi::Uninit(void) {
	CScene2D::Uninit();
}

//=============================================================================
// テクスチャ読み込み処理
//=============================================================================
void CUi::LoadTexture(void) {
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	D3DXCreateTextureFromFile(pDevice, "data/UI/InventoryTexture.png", &m_apTexture[2][0]);
}

//=============================================================================
// インスタンス生成処理
//=============================================================================
CUi* CUi::Create(D3DXVECTOR3 pos) {
	CUi* pCUi = NULL;
	pCUi = new CUi;
	pCUi->Init(pos);

	return pCUi;
}

void CUi::UseInversion(void) {
	
}